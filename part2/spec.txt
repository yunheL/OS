===pin process to core===
before conducting the following experiments, need to pin process to core.
use ps -aF to make sure process on specific core.

===rdtsc() spec===
run rdtsc 1 billion times. Divide the number of ticks over 1 billion to average out timing time cost so that we can get the time of running one rdtsc(). When we are doing this, we also made sure that the process we are running is pinned to a specific core.

run this experiment in loop for 100 times, record the max, min and average. In order compare whether rdtsc() takes a consistent amount of time to run. 

It turned out that rdtsc() does take a relatively consistent amount of time to run. Here is the max, min and avg timing of these 100 loops:

1st run
max: 21.769140 ticks
min: 21.468231 ticks
avg: 21.562288 ticks

2nd run
max: 21.963270 ticks
min: 21.471663 ticks
avg: 21.517359 ticks

3rd run
max: 21.775490 ticks
min: 21.421061 ticks
avg: 21.499767 ticks

===clock_gettime() spec===
run clock_gettime() for 1 billions, divide the time elapsed by 1 billion. Do this in loop for 50 times, record max, min and average.

1st run
max: 15.784463 ns
min: 15.369225 ns
avg: 15.470197 ns

2nd run
max: 16.028545 ns
min: 15.367361 ns
avg: 15.441755 ns

3rd run
max: 15.714920 ns
min: 15.371749 ns
avg: 15.423429 ns

===point to make sure===
1. 3 type of average. arthimatic, harmonic and geometric.
2. "If the processor can automatically vary the clock speed, the timestamp counter may not reflect real time." Make sure processor don't vary clock speed.
3. "You can only compare values on a single core and not across cores." Make sure process is running on a single core.
4. 2 mechanism, highest resolution.
5. simple loop experiment.
6. confirm redtsc() accuracy with clock_gettime().
